package com.scottcaruso.datafunctions;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.HashMap;

import org.json.JSONObject;

import com.scottcaruso.mygov.MainActivity;

import android.content.Context;
import android.widget.Toast;

public class SaveFavoritesLocally {
		
		@SuppressWarnings("resource")
		public static Boolean saveObject(Context context, String filename, Object thisPol, Boolean external)
		{
			try {
				File file;
				FileOutputStream fos;
				ObjectOutputStream oos;
				if (external)
				{
					file = new File(context.getExternalFilesDir(null), filename);
					fos = new FileOutputStream(file);
				} else
				{
					fos = context.openFileOutput(filename, Context.MODE_PRIVATE);
				}
				oos = new ObjectOutputStream(fos);
				oos.writeObject(thisPol);
				oos.close();
				fos.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			return true;
		
	}

	@SuppressWarnings("resource")
	public static Object retrieveSavedObject(Context context, String filename, Boolean external)
	{
		JSONObject savedContent = new JSONObject();
		try
		{
			File file;
			FileInputStream fis;
			Object thisContent;
			if (external)
			{
				file = new File(context.getExternalFilesDir(null), filename);
				fis = new FileInputStream(file);
			} else
			{
				file = new File(filename);
				fis = context.openFileInput(filename);
			}
			ObjectInputStream ois = new ObjectInputStream(fis);		
			try {
				thisContent = (Object) ois.readObject();
				return thisContent;
			} catch (ClassNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			ois.close();
			fis.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}
	
	@SuppressWarnings("unchecked")
	public static HashMap<String, String> getSavedPols()
	{
		Object storedObject = SaveFavoritesLocally.retrieveSavedObject(MainActivity.getCurrentContext(), "Saved Politicians", false);
		HashMap<String, String> data;
		if (storedObject != null)
		{
			data = (HashMap<String, String>)storedObject;
		} else
		{
			Toast toast = Toast.makeText(MainActivity.getCurrentContext(), "No Politicians Saved", Toast.LENGTH_LONG);
			toast.show();
			data = null;
		}
		return data;
	}
	
}
