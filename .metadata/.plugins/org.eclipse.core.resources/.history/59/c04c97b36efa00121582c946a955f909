package com.scottcaruso.datafunctions;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectOutputStream.PutField;
import java.util.HashMap;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.scottcaruso.mygov.MainActivity;

import android.content.Context;
import android.util.Log;
import android.widget.Toast;

public class SaveFavoritesLocally {
		
		@SuppressWarnings("resource")
		public static Boolean saveObject(Context context, String filename, Object thisPol, Boolean external)
		{
			try {
				File file;
				FileOutputStream fos;
				ObjectOutputStream oos;
				if (external)
				{
					file = new File(context.getExternalFilesDir(null), filename);
					fos = new FileOutputStream(file);
				} else
				{
					fos = context.openFileOutput(filename, Context.MODE_PRIVATE);
				}
				oos = new ObjectOutputStream(fos);
				oos.writeObject(thisPol);
				oos.close();
				fos.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			return true;
		
	}

	@SuppressWarnings("resource")
	public static Object retrieveSavedObject(Context context, String filename, Boolean external)
	{
		Object thisContent = new Object();
		try
		{
			File file;
			FileInputStream fis;
			if (external)
			{
				file = new File(context.getExternalFilesDir(null), filename);
				fis = new FileInputStream(file);
			} else
			{
				file = new File(filename);
				fis = context.openFileInput(filename);
			}
			ObjectInputStream ois = new ObjectInputStream(fis);		
			try {
				thisContent = (Object) ois.readObject();
			} catch (ClassNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			ois.close();
			fis.close();
		} catch (FileNotFoundException f)
		{
			return null;
		} catch (IOException e) {
			e.printStackTrace();
			return null;
		}
		return thisContent;
	}
	
	@SuppressWarnings("unchecked")
	public static HashMap<String, String> getSavedPols()
	{
		Object storedObject = SaveFavoritesLocally.retrieveSavedObject(MainActivity.getCurrentContext(), "Politicians", false);
		HashMap<String, String> data;
		if (storedObject != null)
		{
			data = (HashMap<String, String>)storedObject;
		} else
		{
			/*if (fromMain)
			{
				Toast toast = Toast.makeText(MainActivity.getCurrentContext(), "No Politicians Saved", Toast.LENGTH_LONG);
				toast.show();
			}*/
			data = new HashMap<String, String>();
			return null;
		}
		return data;
	}
	
	public static Boolean determineIfAlreadySaved(JSONObject politician)
	{
		HashMap <String, String> savedPols = SaveFavoritesLocally.getSavedPols();
		String thisPol;
		try {
			thisPol = politician.getString("Name");
			//JSONObject savedPolObject = new JSONObject(thisPol);
		} catch (Exception e) {
			Log.i("Test:","No politicans found.");		
		}
		String savedPolsString = savedPols.get("Politicians");
		JSONObject savedPolsObject = new JSONObject(savedPolsString);
		//JSONArray savedPolsArray;
		//savedPolsArray = new JSONArray().put(savedPolsString);
		Log.i("Test",savedPolsObject.toString());
		
		//if (thisPol.contentEquals(cs))
		
		return true;
	}
	
}
